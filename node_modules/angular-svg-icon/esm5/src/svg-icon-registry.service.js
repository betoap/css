/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';
import { of as observableOf, throwError as observableThrowError } from 'rxjs';
import { catchError, finalize, map, share, tap } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import { SvgLoader } from './svg-loader';
/** @type {?} */
export var SERVER_URL = new InjectionToken('SERVER_URL');
var SvgIconRegistryService = /** @class */ (function () {
    function SvgIconRegistryService(loader, platformId, serverUrl, _document) {
        this.loader = loader;
        this.platformId = platformId;
        this.serverUrl = serverUrl;
        this._document = _document;
        this.iconsByUrl = new Map();
        this.iconsLoadingByUrl = new Map();
        this.document = this._document;
    }
    /** Add a SVG to the registry by passing a name and the SVG. */
    /**
     * Add a SVG to the registry by passing a name and the SVG.
     * @param {?} name
     * @param {?} data
     * @return {?}
     */
    SvgIconRegistryService.prototype.addSvg = /**
     * Add a SVG to the registry by passing a name and the SVG.
     * @param {?} name
     * @param {?} data
     * @return {?}
     */
    function (name, data) {
        if (!this.iconsByUrl.has(name)) {
            /** @type {?} */
            var div = this.document.createElement('DIV');
            div.innerHTML = data;
            /** @type {?} */
            var svg = (/** @type {?} */ (div.querySelector('svg')));
            this.iconsByUrl.set(name, svg);
        }
    };
    /** Load a SVG to the registry from a URL. */
    /**
     * Load a SVG to the registry from a URL.
     * @param {?} url
     * @param {?=} name
     * @return {?}
     */
    SvgIconRegistryService.prototype.loadSvg = /**
     * Load a SVG to the registry from a URL.
     * @param {?} url
     * @param {?=} name
     * @return {?}
     */
    function (url, name) {
        var _this = this;
        if (name === void 0) { name = url; }
        // not sure if there should be a possibility to use name for server usage
        // so overriding it for now if provided
        // maybe should separate functionality for url and name use-cases
        if (this.serverUrl && url.match(/^(http(s)?):/) === null) {
            url = this.serverUrl + url;
            name = url;
        }
        if (this.iconsByUrl.has(name)) {
            return observableOf(this.iconsByUrl.get(name));
        }
        else if (this.iconsLoadingByUrl.has(name)) {
            return this.iconsLoadingByUrl.get(name);
        }
        /** @type {?} */
        var o = (/** @type {?} */ (this.loader.getSvg(url).pipe(map((/**
         * @param {?} svg
         * @return {?}
         */
        function (svg) {
            /** @type {?} */
            var div = _this.document.createElement('DIV');
            div.innerHTML = svg;
            return (/** @type {?} */ (div.querySelector('svg')));
        })), tap((/**
         * @param {?} svg
         * @return {?}
         */
        function (svg) { return _this.iconsByUrl.set(name, svg); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            return observableThrowError(err);
        })), finalize((/**
         * @return {?}
         */
        function () { return _this.iconsLoadingByUrl.delete(name); })), share())));
        this.iconsLoadingByUrl.set(name, o);
        return o;
    };
    /** Get loaded SVG from registry by name. (also works by url because of blended map) */
    /**
     * Get loaded SVG from registry by name. (also works by url because of blended map)
     * @param {?} name
     * @return {?}
     */
    SvgIconRegistryService.prototype.getSvgByName = /**
     * Get loaded SVG from registry by name. (also works by url because of blended map)
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.iconsByUrl.has(name)) {
            return observableOf(this.iconsByUrl.get(name));
        }
        else if (this.iconsLoadingByUrl.has(name)) {
            return this.iconsLoadingByUrl.get(name);
        }
        return observableThrowError("No svg with name '" + name + "' has been loaded");
    };
    /** Remove a SVG from the registry by URL (or name). */
    /**
     * Remove a SVG from the registry by URL (or name).
     * @param {?} url
     * @return {?}
     */
    SvgIconRegistryService.prototype.unloadSvg = /**
     * Remove a SVG from the registry by URL (or name).
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (this.iconsByUrl.has(url)) {
            this.iconsByUrl.delete(url);
        }
    };
    SvgIconRegistryService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SvgIconRegistryService.ctorParameters = function () { return [
        { type: SvgLoader },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_URL,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return SvgIconRegistryService;
}());
export { SvgIconRegistryService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.iconsByUrl;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.iconsLoadingByUrl;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.loader;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype.platformId;
    /**
     * @type {?}
     * @protected
     */
    SvgIconRegistryService.prototype.serverUrl;
    /**
     * @type {?}
     * @private
     */
    SvgIconRegistryService.prototype._document;
}
/**
 * @param {?} parentRegistry
 * @param {?} loader
 * @param {?} platformId
 * @param {?=} serverUrl
 * @param {?=} document
 * @return {?}
 */
export function SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, loader, platformId, serverUrl, document) {
    return parentRegistry || new SvgIconRegistryService(loader, platformId, serverUrl, document);
}
/** @type {?} */
export var SVG_ICON_REGISTRY_PROVIDER = {
    provide: SvgIconRegistryService,
    deps: [[new Optional(), new SkipSelf(), SvgIconRegistryService], SvgLoader, [(/** @type {?} */ (PLATFORM_ID))],
        [new Optional(), (/** @type {?} */ (SERVER_URL))], [new Optional(), (/** @type {?} */ (DOCUMENT))]
    ],
    useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY
};
//# sourceMappingURL=data:application/json;base64,