/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input, KeyValueDiffers, Renderer2 } from '@angular/core';
import { SvgIconRegistryService } from './svg-icon-registry.service';
export class SvgIconComponent {
    /**
     * @param {?} element
     * @param {?} differs
     * @param {?} renderer
     * @param {?} iconReg
     * @param {?} cdr
     */
    constructor(element, differs, renderer, iconReg, cdr) {
        this.element = element;
        this.differs = differs;
        this.renderer = renderer;
        this.iconReg = iconReg;
        this.cdr = cdr;
        this.stretch = false;
        this.applyCss = false;
    }
    // Adapted from ngStyle
    /**
     * @param {?} v
     * @return {?}
     */
    set svgStyle(v) {
        this._svgStyle = v;
        if (!this.differ && v) {
            this.differ = this.differs.find(v).create();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @param {?} changeRecord
     * @return {?}
     */
    ngOnChanges(changeRecord) {
        if (changeRecord['src'] || changeRecord['name']) {
            if (this.svg) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord['stretch']) {
            this.stylize();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.svg && this.differ) {
            /** @type {?} */
            const changes = this.differ.diff(this._svgStyle);
            if (changes) {
                this.applyChanges(changes);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        if (this.name) {
            this.icnSub = this.iconReg.getSvgByName(this.name).subscribe(this.initSvg.bind(this));
            return;
        }
        this.icnSub = this.iconReg.loadSvg(this.src).subscribe(this.initSvg.bind(this));
    }
    /**
     * @private
     * @param {?} svg
     * @return {?}
     */
    initSvg(svg) {
        this.setSvg(svg);
        this.resetDiffer();
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        this.svg = undefined;
        this.differ = undefined;
        if (this.icnSub) {
            this.icnSub.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetDiffer() {
        if (this._svgStyle && !this.differ) {
            this.differ = this.differs.find(this._svgStyle).create();
        }
    }
    /**
     * @private
     * @param {?} svg
     * @return {?}
     */
    setSvg(svg) {
        if (svg) {
            this.svg = svg;
            /** @type {?} */
            const icon = (/** @type {?} */ (svg.cloneNode(true)));
            /** @type {?} */
            const elem = this.element.nativeElement;
            if (this.applyCss) {
                this.copyNgContentAttribute(elem, icon);
            }
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.stylize();
            this.cdr.markForCheck();
        }
    }
    /**
     * @private
     * @param {?} hostElem
     * @param {?} icon
     * @return {?}
     */
    copyNgContentAttribute(hostElem, icon) {
        /** @type {?} */
        const attributes = (/** @type {?} */ (hostElem.attributes));
        /** @type {?} */
        const len = attributes.length;
        for (let i = 0; i < len; i += 1) {
            /** @type {?} */
            const attribute = attributes.item(i);
            if (attribute.name.startsWith('_ngcontent')) {
                this.setNgContentAttribute(icon, attribute.name);
                break;
            }
        }
    }
    /**
     * @private
     * @param {?} parent
     * @param {?} attributeName
     * @return {?}
     */
    setNgContentAttribute(parent, attributeName) {
        this.renderer.setAttribute(parent, attributeName, '');
        /** @type {?} */
        const len = parent.childNodes.length;
        for (let i = 0; i < len; i += 1) {
            /** @type {?} */
            const child = parent.childNodes[i];
            if (child instanceof Element) {
                this.setNgContentAttribute(child, attributeName);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    stylize() {
        if (this.svg) {
            /** @type {?} */
            const svg = this.element.nativeElement.firstChild;
            if (this.stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (this.stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    applyChanges(changes) {
        changes.forEachRemovedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this.setStyle(record.key, null)));
        changes.forEachAddedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this.setStyle(record.key, record.currentValue)));
        changes.forEachChangedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this.setStyle(record.key, record.currentValue)));
    }
    /**
     * @private
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    setStyle(nameAndUnit, value) {
        const [name, unit] = nameAndUnit.split('.');
        value = value !== null && unit ? `${value}${unit}` : value;
        /** @type {?} */
        const svg = this.element.nativeElement.firstChild;
        if (value !== null) {
            this.renderer.setStyle(svg, name, (/** @type {?} */ (value)));
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    }
}
SvgIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'svg-icon',
                template: '<ng-content></ng-content>'
            }] }
];
/** @nocollapse */
SvgIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: KeyValueDiffers },
    { type: Renderer2 },
    { type: SvgIconRegistryService },
    { type: ChangeDetectorRef }
];
SvgIconComponent.propDecorators = {
    src: [{ type: Input }],
    name: [{ type: Input }],
    stretch: [{ type: Input }],
    applyCss: [{ type: Input }],
    svgStyle: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SvgIconComponent.prototype.src;
    /** @type {?} */
    SvgIconComponent.prototype.name;
    /** @type {?} */
    SvgIconComponent.prototype.stretch;
    /** @type {?} */
    SvgIconComponent.prototype.applyCss;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.svg;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.icnSub;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype._svgStyle;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.iconReg;
    /**
     * @type {?}
     * @private
     */
    SvgIconComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,